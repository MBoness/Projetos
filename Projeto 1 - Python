{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "00734067",
   "metadata": {},
   "source": [
    "Neste projeto, faço o processamento de um conjunto de dados para que seja utilizado por um banco comercial para guiar o processo de aprovação/rejeição na concessão de cartões de crédito. Após o processamento, os dados serão utilizados para a criaçao de um modelo de machine learning para prever a aprovação na obtenção do cartão.\n",
    "\n",
    "Os dados utilizados neste projeto foram obtidos através do repositório UCI Machine Learning\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e2f8904b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Debt</th>\n",
       "      <th>Married</th>\n",
       "      <th>BankCustomer</th>\n",
       "      <th>EducationLevel</th>\n",
       "      <th>Ethnicity</th>\n",
       "      <th>YearsEmployed</th>\n",
       "      <th>PriorDefault</th>\n",
       "      <th>Employed</th>\n",
       "      <th>CreditScore</th>\n",
       "      <th>DriversLicense</th>\n",
       "      <th>Citizen</th>\n",
       "      <th>ZipCode</th>\n",
       "      <th>Income</th>\n",
       "      <th>ApprovalStatus</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>b</td>\n",
       "      <td>30.83</td>\n",
       "      <td>0.000</td>\n",
       "      <td>u</td>\n",
       "      <td>g</td>\n",
       "      <td>w</td>\n",
       "      <td>v</td>\n",
       "      <td>1.25</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>1</td>\n",
       "      <td>f</td>\n",
       "      <td>g</td>\n",
       "      <td>202</td>\n",
       "      <td>0</td>\n",
       "      <td>+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>a</td>\n",
       "      <td>58.67</td>\n",
       "      <td>4.460</td>\n",
       "      <td>u</td>\n",
       "      <td>g</td>\n",
       "      <td>q</td>\n",
       "      <td>h</td>\n",
       "      <td>3.04</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>6</td>\n",
       "      <td>f</td>\n",
       "      <td>g</td>\n",
       "      <td>43</td>\n",
       "      <td>560</td>\n",
       "      <td>+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>a</td>\n",
       "      <td>24.5</td>\n",
       "      <td>0.500</td>\n",
       "      <td>u</td>\n",
       "      <td>g</td>\n",
       "      <td>q</td>\n",
       "      <td>h</td>\n",
       "      <td>1.50</td>\n",
       "      <td>t</td>\n",
       "      <td>f</td>\n",
       "      <td>0</td>\n",
       "      <td>f</td>\n",
       "      <td>g</td>\n",
       "      <td>280</td>\n",
       "      <td>824</td>\n",
       "      <td>+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>b</td>\n",
       "      <td>27.83</td>\n",
       "      <td>1.540</td>\n",
       "      <td>u</td>\n",
       "      <td>g</td>\n",
       "      <td>w</td>\n",
       "      <td>v</td>\n",
       "      <td>3.75</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>5</td>\n",
       "      <td>t</td>\n",
       "      <td>g</td>\n",
       "      <td>100</td>\n",
       "      <td>3</td>\n",
       "      <td>+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>b</td>\n",
       "      <td>20.17</td>\n",
       "      <td>5.625</td>\n",
       "      <td>u</td>\n",
       "      <td>g</td>\n",
       "      <td>w</td>\n",
       "      <td>v</td>\n",
       "      <td>1.71</td>\n",
       "      <td>t</td>\n",
       "      <td>f</td>\n",
       "      <td>0</td>\n",
       "      <td>f</td>\n",
       "      <td>s</td>\n",
       "      <td>120</td>\n",
       "      <td>0</td>\n",
       "      <td>+</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Gender    Age   Debt Married BankCustomer EducationLevel Ethnicity  \\\n",
       "0      b  30.83  0.000       u            g              w         v   \n",
       "1      a  58.67  4.460       u            g              q         h   \n",
       "2      a   24.5  0.500       u            g              q         h   \n",
       "3      b  27.83  1.540       u            g              w         v   \n",
       "4      b  20.17  5.625       u            g              w         v   \n",
       "\n",
       "   YearsEmployed PriorDefault Employed  CreditScore DriversLicense Citizen  \\\n",
       "0           1.25            t        t            1              f       g   \n",
       "1           3.04            t        t            6              f       g   \n",
       "2           1.50            t        f            0              f       g   \n",
       "3           3.75            t        t            5              t       g   \n",
       "4           1.71            t        f            0              f       s   \n",
       "\n",
       "  ZipCode  Income ApprovalStatus  \n",
       "0     202       0              +  \n",
       "1      43     560              +  \n",
       "2     280     824              +  \n",
       "3     100       3              +  \n",
       "4     120       0              +  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Importando o Pandas\n",
    "import pandas as pd\n",
    "\n",
    "#Carregando o dataset\n",
    "cc_approv = pd.read_csv(\"/Users/computer/Documents/Coding/Projetos/credit approvals data/CreditApproval.csv\")\n",
    "\n",
    "#Conferindo os dados carregados\n",
    "cc_approv.head(15)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f01cb433",
   "metadata": {},
   "source": [
    "# Inspecionando os dados\n",
    "\n",
    "Podemos ver que o dataset possui uma mistura de dados numéricos e não-numéricos.\n",
    "Vamos explorá-lo um pouco mais para entender a disposição de seus dados e detectar possíveis problemas que devam ser corrigidos."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7d939be2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             Debt  YearsEmployed  CreditScore         Income\n",
      "count  690.000000     690.000000    690.00000     690.000000\n",
      "mean     4.758725       2.223406      2.40000    1017.385507\n",
      "std      4.978163       3.346513      4.86294    5210.102598\n",
      "min      0.000000       0.000000      0.00000       0.000000\n",
      "25%      1.000000       0.165000      0.00000       0.000000\n",
      "50%      2.750000       1.000000      0.00000       5.000000\n",
      "75%      7.207500       2.625000      3.00000     395.500000\n",
      "max     28.000000      28.500000     67.00000  100000.000000\n",
      "\n",
      "\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 690 entries, 0 to 689\n",
      "Data columns (total 16 columns):\n",
      " #   Column          Non-Null Count  Dtype  \n",
      "---  ------          --------------  -----  \n",
      " 0   Gender          690 non-null    object \n",
      " 1   Age             690 non-null    object \n",
      " 2   Debt            690 non-null    float64\n",
      " 3   Married         690 non-null    object \n",
      " 4   BankCustomer    690 non-null    object \n",
      " 5   EducationLevel  690 non-null    object \n",
      " 6   Ethnicity       690 non-null    object \n",
      " 7   YearsEmployed   690 non-null    float64\n",
      " 8   PriorDefault    690 non-null    object \n",
      " 9   Employed        690 non-null    object \n",
      " 10  CreditScore     690 non-null    int64  \n",
      " 11  DriversLicense  690 non-null    object \n",
      " 12  Citizen         690 non-null    object \n",
      " 13  ZipCode         690 non-null    object \n",
      " 14  Income          690 non-null    int64  \n",
      " 15  ApprovalStatus  690 non-null    object \n",
      "dtypes: float64(2), int64(2), object(12)\n",
      "memory usage: 86.4+ KB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "# Estatísticas descritivas\n",
    "cc_approv_description = cc_approv.describe()\n",
    "print(cc_approv_description)\n",
    "\n",
    "print('\\n')\n",
    "\n",
    "# Print DataFrame information\n",
    "cc_approv_info = cc_approv.info()\n",
    "print(cc_approv_info)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7d9bfb2",
   "metadata": {},
   "source": [
    "Podemos perceber que este data set:\n",
    "-Contém 4 colunas da dados numéricos (Debt, YearsEmployed, CreditScore e Income) enquanto as outras colunas contém dados do tipo não-numérico.\n",
    "\n",
    "-Que os dados numéricos variam bastante em termos de amplitude. Enquanto a coluna Debt varia de 0-28, a coluna Income varia de 0-100000.\n",
    "\n",
    "-Temos alguns valores faltantes que, neste dataset, foram substituídos por \"?\".\n",
    "\n",
    "Além disso, uma primeira análise deste dataset indica que colunas como o tipo da habilitação (DriversLicense) e o código postal (ZipCode) não são tão relevantes quanto as outras para prever a concessão de cartão de crédito (análises mais robustas poderiam ser realizadas para avaliar a relevância destes dados, mas estas técnicas estão fora do escopo deste projeto). Desta forma, estas colunas serão excluídas do dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c0c0d1d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Excluindo as colunas DriversLicense e ZipCode\n",
    "cc_approv = cc_approv.drop([\"DriversLicense\" , \"ZipCode\"], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f99df6c",
   "metadata": {},
   "source": [
    "# Dividindo o dataset entre treino e teste\n",
    "\n",
    "Os manuais de machine learning preconizam que nenhuma informação dos dados de teste deve ser utilizada para pré-processar os dados de treino. Desta forma, realizei a divisão dos dados entre treino e teste previamente ao processamento destes dados.\n",
    "Para isso, será utilizada a função train_test_split do sklearn.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9b49e924",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importando a função train_test_split\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "#Dividindo os dados entre treino e teste\n",
    "cc_approv_treino, cc_approv_teste = train_test_split(cc_approv, test_size=0.33, random_state=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac3bca44",
   "metadata": {},
   "source": [
    "# Lidando com valores faltantes\n",
    "\n",
    "Vamos substituir os valores faltantes (neste caso marcados como \"?\") pela expressão \"NaN\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "26041f29",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "#Substituir os \"?\" por \"NaN\" nos dataset treino e teste\n",
    "\n",
    "cc_approv_treino = cc_approv_treino.replace(\"?\", np.NaN)\n",
    "cc_approv_teste = cc_approv_teste.replace(\"?\", np.NaN)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d76823c",
   "metadata": {},
   "source": [
    "O próximo passo foi imputar os valores numéricos faltantes. Neste caso, decidiu-se substituí-los pelo valor médio de cada coluna. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7e3ed0d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gender            6\n",
      "Age               6\n",
      "Debt              0\n",
      "Married           5\n",
      "BankCustomer      5\n",
      "EducationLevel    6\n",
      "Ethnicity         6\n",
      "YearsEmployed     0\n",
      "PriorDefault      0\n",
      "Employed          0\n",
      "CreditScore       0\n",
      "Citizen           0\n",
      "Income            0\n",
      "ApprovalStatus    0\n",
      "dtype: int64\n",
      "Gender            6\n",
      "Age               6\n",
      "Debt              0\n",
      "Married           1\n",
      "BankCustomer      1\n",
      "EducationLevel    3\n",
      "Ethnicity         3\n",
      "YearsEmployed     0\n",
      "PriorDefault      0\n",
      "Employed          0\n",
      "CreditScore       0\n",
      "Citizen           0\n",
      "Income            0\n",
      "ApprovalStatus    0\n",
      "dtype: int64\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/t2/y5xv3kvj3bq_p9_lkwdl_mj00000gn/T/ipykernel_22829/2599794956.py:2: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n",
      "  cc_approv_treino.fillna(cc_approv_treino.mean(), inplace=True)\n",
      "/var/folders/t2/y5xv3kvj3bq_p9_lkwdl_mj00000gn/T/ipykernel_22829/2599794956.py:3: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n",
      "  cc_approv_teste.fillna(cc_approv_treino.mean(), inplace=True)\n"
     ]
    }
   ],
   "source": [
    "# Imputar a média nos campos com valores faltantes\n",
    "cc_approv_treino.fillna(cc_approv_treino.mean(), inplace=True)\n",
    "cc_approv_teste.fillna(cc_approv_treino.mean(), inplace=True)\n",
    "\n",
    "# Verificar o número de NaNs em cada coluna. Poderemos observar um total de 0 valores faltantes nas colunas com dados numéricos\n",
    "print(cc_approv_treino.isnull().sum())\n",
    "print(cc_approv_teste.isnull().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4879c23e",
   "metadata": {},
   "source": [
    "Agora vamos processar os valores faltantes nas colunas não-numéricas.\n",
    "A estratégia escolhida neste projeto foi substituir os falores faltantes pelo valor mais frequente em cada coluna. Contudo, vale salientar que esta estratégia pode variar dependendo de cada projeto, e que a sua escolha deve ser cuidadosa e, se possível, discutida com o time de dados da empresa."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "2f1fd1cc",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gender            0\n",
      "Age               0\n",
      "Debt              0\n",
      "Married           0\n",
      "BankCustomer      0\n",
      "EducationLevel    0\n",
      "Ethnicity         0\n",
      "YearsEmployed     0\n",
      "PriorDefault      0\n",
      "Employed          0\n",
      "CreditScore       0\n",
      "Citizen           0\n",
      "Income            0\n",
      "ApprovalStatus    0\n",
      "dtype: int64\n",
      "Gender            0\n",
      "Age               0\n",
      "Debt              0\n",
      "Married           0\n",
      "BankCustomer      0\n",
      "EducationLevel    0\n",
      "Ethnicity         0\n",
      "YearsEmployed     0\n",
      "PriorDefault      0\n",
      "Employed          0\n",
      "CreditScore       0\n",
      "Citizen           0\n",
      "Income            0\n",
      "ApprovalStatus    0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Iterando em cada coluna de cc_approv_treino\n",
    "for col in cc_approv_treino.columns:\n",
    "    # Confere se a coluna é do tipo \"Object\"\n",
    "    if cc_approv_treino[col].dtype == 'object':\n",
    "        # Imputa o valor mais frequente da coluna\n",
    "        cc_approv_treino = cc_approv_treino.fillna(cc_approv_treino[col].value_counts().index[0])\n",
    "        cc_approv_teste = cc_approv_teste.fillna(cc_approv_treino[col].value_counts().index[0])\n",
    "'''Em resumo, o código percorre cada coluna do dataframe \"cc_approv_treino\" e verifica se ela é do tipo 'object'. Caso True, os \n",
    "valores ausentes (NaN) são preenchidos com o valor mais frequente encontrado na respectiva coluna. index[0] retorna o primeiro\n",
    "índice da série, que corresponde ao valor mais frequente'''\n",
    "\n",
    "# Verificar o número de NaNs em cada coluna. Poderemos observar que não existem mais valores faltantes nos datasets.\n",
    "print(cc_approv_treino.isnull().sum())\n",
    "print(cc_approv_teste.isnull().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "534f9bbb",
   "metadata": {},
   "source": [
    "Sucesso!\n",
    "\n",
    "Agora, os próximos passos garantirão que este dataset esteja apropriado para o uso em modelos de ML:\n",
    "\n",
    "-Converter valores não-numéricos para numéricos\n",
    "\n",
    "-Alterar a escala dos valores numéricos para que eles fiquem mais uniformes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d96ed337",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convertendo os valores não-numéricos para numéricos utilizando o método get_dummies\n",
    "cc_approv_treino = pd.get_dummies(cc_approv_treino)\n",
    "cc_approv_teste = pd.get_dummies(cc_approv_teste)\n",
    "\n",
    "\n",
    "# Utilizando a função Reindex para garantir que as colunas do dataset de teste estejam alinhadas com as colunas do dataset de treino\n",
    "cc_approv_teste = cc_approv_teste.reindex(columns=cc_approv_treino.columns, fill_value=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "bdeedc38",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Utilizando a função MinMaxScaler para alterar a escala dos dados\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "# Separando \"features\" e \"label\" em varáveis separadas. Neste datase o \"label\" é a última coluna da tabela que diz se o cartão de crédito foi aprovado ou não.\n",
    "x_treino, y_treino = cc_approv_treino.iloc[:, :-1].values, cc_approv_treino.iloc[:,[-1]].values #separando a coluna label das demais\n",
    "x_teste, y_teste = cc_approv_teste.iloc[:, :-1].values, cc_approv_teste.iloc[:,[-1]].values #separando a coluna label das demais\n",
    "\n",
    "# Usando o método MinMaxScaler para mudar a escala dos dados de X_treino and X_teste\n",
    "escala = MinMaxScaler(feature_range=(0,1))\n",
    "reescalax_treino = escala.fit_transform(x_treino)\n",
    "reescalax_teste = escala.transform(x_teste)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "a62ce1f9",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Debt</th>\n",
       "      <th>YearsEmployed</th>\n",
       "      <th>CreditScore</th>\n",
       "      <th>Income</th>\n",
       "      <th>Gender_a</th>\n",
       "      <th>Gender_b</th>\n",
       "      <th>Age_15.17</th>\n",
       "      <th>Age_15.75</th>\n",
       "      <th>Age_15.83</th>\n",
       "      <th>Age_15.92</th>\n",
       "      <th>...</th>\n",
       "      <th>Ethnicity_z</th>\n",
       "      <th>PriorDefault_f</th>\n",
       "      <th>PriorDefault_t</th>\n",
       "      <th>Employed_f</th>\n",
       "      <th>Employed_t</th>\n",
       "      <th>Citizen_g</th>\n",
       "      <th>Citizen_p</th>\n",
       "      <th>Citizen_s</th>\n",
       "      <th>ApprovalStatus_+</th>\n",
       "      <th>ApprovalStatus_-</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>589</th>\n",
       "      <td>0.580</td>\n",
       "      <td>0.290</td>\n",
       "      <td>7</td>\n",
       "      <td>5124</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570</th>\n",
       "      <td>2.750</td>\n",
       "      <td>1.750</td>\n",
       "      <td>5</td>\n",
       "      <td>58</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>361</th>\n",
       "      <td>2.500</td>\n",
       "      <td>0.085</td>\n",
       "      <td>0</td>\n",
       "      <td>4208</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>0.585</td>\n",
       "      <td>0.250</td>\n",
       "      <td>2</td>\n",
       "      <td>500</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>438</th>\n",
       "      <td>1.250</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1</td>\n",
       "      <td>300</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 339 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Debt  YearsEmployed  CreditScore  Income  Gender_a  Gender_b  Age_15.17  \\\n",
       "589  0.580          0.290            7    5124         0         1          0   \n",
       "570  2.750          1.750            5      58         0         1          0   \n",
       "361  2.500          0.085            0    4208         0         1          0   \n",
       "38   0.585          0.250            2     500         0         1          0   \n",
       "438  1.250          0.000            1     300         1         0          0   \n",
       "\n",
       "     Age_15.75  Age_15.83  Age_15.92  ...  Ethnicity_z  PriorDefault_f  \\\n",
       "589          0          0          0  ...            0               0   \n",
       "570          0          0          0  ...            0               0   \n",
       "361          0          0          0  ...            0               1   \n",
       "38           0          0          0  ...            0               0   \n",
       "438          0          0          0  ...            0               1   \n",
       "\n",
       "     PriorDefault_t  Employed_f  Employed_t  Citizen_g  Citizen_p  Citizen_s  \\\n",
       "589               1           0           1          1          0          0   \n",
       "570               1           0           1          1          0          0   \n",
       "361               0           1           0          1          0          0   \n",
       "38                1           0           1          1          0          0   \n",
       "438               0           0           1          1          0          0   \n",
       "\n",
       "     ApprovalStatus_+  ApprovalStatus_-  \n",
       "589                 1                 0  \n",
       "570                 1                 0  \n",
       "361                 0                 1  \n",
       "38                  1                 0  \n",
       "438                 0                 1  \n",
       "\n",
       "[5 rows x 339 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cc_approv_treino.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "5cec12ac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(462, 339)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cc_approv_treino.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e184168e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Debt</th>\n",
       "      <th>YearsEmployed</th>\n",
       "      <th>CreditScore</th>\n",
       "      <th>Income</th>\n",
       "      <th>Gender_a</th>\n",
       "      <th>Gender_b</th>\n",
       "      <th>Age_15.17</th>\n",
       "      <th>Age_15.75</th>\n",
       "      <th>Age_15.83</th>\n",
       "      <th>Age_15.92</th>\n",
       "      <th>...</th>\n",
       "      <th>Ethnicity_z</th>\n",
       "      <th>PriorDefault_f</th>\n",
       "      <th>PriorDefault_t</th>\n",
       "      <th>Employed_f</th>\n",
       "      <th>Employed_t</th>\n",
       "      <th>Citizen_g</th>\n",
       "      <th>Citizen_p</th>\n",
       "      <th>Citizen_s</th>\n",
       "      <th>ApprovalStatus_+</th>\n",
       "      <th>ApprovalStatus_-</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>666</th>\n",
       "      <td>11.75</td>\n",
       "      <td>0.250</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>520</th>\n",
       "      <td>7.50</td>\n",
       "      <td>1.500</td>\n",
       "      <td>1</td>\n",
       "      <td>234</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>681</th>\n",
       "      <td>1.00</td>\n",
       "      <td>3.000</td>\n",
       "      <td>0</td>\n",
       "      <td>537</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>14.50</td>\n",
       "      <td>3.085</td>\n",
       "      <td>1</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>1.54</td>\n",
       "      <td>1.540</td>\n",
       "      <td>1</td>\n",
       "      <td>50000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 339 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Debt  YearsEmployed  CreditScore  Income  Gender_a  Gender_b  Age_15.17  \\\n",
       "666  11.75          0.250            0       0         1         0          0   \n",
       "520   7.50          1.500            1     234         0         1          0   \n",
       "681   1.00          3.000            0     537         0         1          0   \n",
       "23   14.50          3.085            1      11         1         0          0   \n",
       "65    1.54          1.540            1   50000         0         1          0   \n",
       "\n",
       "     Age_15.75  Age_15.83  Age_15.92  ...  Ethnicity_z  PriorDefault_f  \\\n",
       "666          0          0          0  ...            0               1   \n",
       "520          0          0          0  ...            0               0   \n",
       "681          0          0          0  ...            0               1   \n",
       "23           0          0          0  ...            0               0   \n",
       "65           0          0          0  ...            0               0   \n",
       "\n",
       "     PriorDefault_t  Employed_f  Employed_t  Citizen_g  Citizen_p  Citizen_s  \\\n",
       "666               0           1           0          1          0          0   \n",
       "520               1           0           1          1          0          0   \n",
       "681               0           1           0          1          0          0   \n",
       "23                1           0           1          1          0          0   \n",
       "65                1           0           1          1          0          0   \n",
       "\n",
       "     ApprovalStatus_+  ApprovalStatus_-  \n",
       "666                 0                 1  \n",
       "520                 1                 0  \n",
       "681                 0                 1  \n",
       "23                  1                 0  \n",
       "65                  1                 0  \n",
       "\n",
       "[5 rows x 339 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cc_approv_teste.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "1022ccce",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(228, 339)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cc_approv_teste.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "9d50aaaa",
   "metadata": {},
   "outputs": [],
   "source": [
    "cc_approv_treino.to_csv(\"cc_approv_treino.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "cdcbd2bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "cc_approv_teste.to_csv(\"cc_approv_test.csv\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
